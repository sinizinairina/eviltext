// Generated by CoffeeScript 1.7.1
(function() {
  var __slice = [].slice;

  app.pathUtil = {
    relativePath: function(rootPath, path) {
      if (rootPath === '/') {
        return path;
      } else if (path === rootPath) {
        return '/';
      } else {
        return path.replace(rootPath, '');
      }
    },
    absolutePath: function(rootPath, path) {
      if (path == null) {
        path = '/';
      }
      if (rootPath === '/') {
        return path;
      } else if (path === '/') {
        return rootPath;
      } else {
        return "" + rootPath + path;
      }
    },
    absolutePathIfNotAbsolute: function(rootPath, path) {
      if (/^\/|^http:\/\/|^https:\/\/|^mailto:/.test(path)) {
        return path;
      } else {
        return this.absolutePath(rootPath, "/" + path);
      }
    },
    join: function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return args.join('/').replace(/\/\/\/?/g, '/');
    },
    parentPath: function(path) {
      if (!path || path === '/') {
        return null;
      } else {
        return path.replace(/\/[^\/]+$/, '') || '/';
      }
    },
    expandRelativePath: function(path, base) {
      if (!base) {
        throw new Error("can't expand path " + path + ", no base!");
      }
      if ((path == null) || _.isBlank(path) || /^\/|^#|^[a-z]+:/.test(path)) {
        return path;
      }
      if (/^\.\//.test(path)) {
        return path.replace(/^\./, base);
      } else {
        return "" + base + (base === '/' ? '' : '/') + path;
      }
    },
    isImagePath: function(path) {
      return /\.(png|jpg|jpeg|bmp|svf)$/.test(path);
    },
    buildUrl: function(path, params) {
      var buff, delimiter, format, host, k, oldParams, port, portStr, protocol, v;
      if (params == null) {
        params = {};
      }
      oldParams = params;
      params = {};
      for (k in oldParams) {
        v = oldParams[k];
        if ((k != null) && (v != null)) {
          params[k] = v;
        }
      }
      if (params.host) {
        host = params.host;
        delete params.host;
      }
      if (params.port) {
        port = params.port;
        delete params.port;
      }
      if (params.protocol) {
        protocol = params.protocol;
        delete params.protocol;
      } else {
        protocol = 'http';
      }
      if (params.format) {
        format = params.format;
        delete params.format;
      }
      if (host) {
        portStr = port && port !== 80 && port !== '80' ? ':' + port : '';
        path = "" + protocol + "://" + host + portStr + (path === '/' ? '' : path);
      }
      if (format) {
        path = "" + path + "." + format;
      }
      if (_(params).size() > 0) {
        delimiter = /\?/.test(path) ? '&' : '?';
        buff = [];
        for (k in params) {
          v = params[k];
          buff.push("" + (encodeURIComponent(k.toString())) + "=" + (encodeURIComponent(v.toString())));
        }
        return path + delimiter + buff.join('&');
      } else {
        return path;
      }
    }
  };

  app.path = app.pathUtil.buildUrl;

}).call(this);
