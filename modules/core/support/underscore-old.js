// Generated by CoffeeScript 1.7.1
(function() {
  var extend, _,
    __hasProp = {}.hasOwnProperty,
    __slice = [].slice;

  module.exports = _ = require('underscore');

  extend = require('node.extend');

  _.mixin({
    "delete": function(obj, key) {
      var oldValue;
      oldValue = obj[key];
      if (_(obj).isArray()) {
        if ((key >= 0) && (key < obj.length)) {
          obj.splice(key, 1);
        }
      } else {
        delete obj[key];
      }
      return oldValue;
    },
    deleteValue: function(obj, value) {
      return this.deleteIf(obj, function(v) {
        return v === value;
      });
    },
    deleteIf: function(obj, fn) {
      var i, indexes, k, keys, v, _i, _j, _len, _len1, _results, _results1;
      if (_(obj).isArray()) {
        indexes = (function() {
          var _i, _len, _results;
          _results = [];
          for (i = _i = 0, _len = obj.length; _i < _len; i = ++_i) {
            v = obj[i];
            if (fn(v)) {
              _results.push(i);
            }
          }
          return _results;
        })();
        _results = [];
        for (_i = 0, _len = indexes.length; _i < _len; _i++) {
          i = indexes[_i];
          _results.push(_["delete"](obj, i));
        }
        return _results;
      } else {
        keys = (function() {
          var _results1;
          _results1 = [];
          for (k in obj) {
            v = obj[k];
            if (fn(v)) {
              _results1.push(k);
            }
          }
          return _results1;
        })();
        _results1 = [];
        for (_j = 0, _len1 = keys.length; _j < _len1; _j++) {
          k = keys[_j];
          _results1.push(delete obj[k]);
        }
        return _results1;
      }
    },
    isBlank: function(obj) {
      var k;
      if (obj === null || obj === void 0) {
        return true;
      }
      if (_.isString(obj)) {
        return /^\s*$/.test(obj);
      }
      if (_.isArray(obj)) {
        return obj.length === 0;
      }
      if (isFinite(obj)) {
        return false;
      }
      for (k in obj) {
        if (!__hasProp.call(obj, k)) continue;
        return false;
      }
      return true;
    },
    isPresent: function(obj) {
      return !_.isBlank(obj);
    },
    deepClone: function(obj) {
      var o, _i, _len, _results;
      if (_(obj).isArray()) {
        _results = [];
        for (_i = 0, _len = obj.length; _i < _len; _i++) {
          o = obj[_i];
          _results.push(extend(true, {}, o));
        }
        return _results;
      } else {
        return extend(true, {}, obj);
      }
    },
    defineClassInheritableAccessor: function(obj, name, defaultValue) {
      var _name;
      _name = "_" + name;
      return obj[name] = function() {
        var _ref;
        if (this[_name] == null) {
          this[_name] = _(defaultValue).clone();
        }
        if (this[_name] === ((_ref = this.__super__) != null ? _ref.constructor[_name] : void 0)) {
          this[_name] = _(this[_name]).clone();
        }
        return this[_name];
      };
    },
    required: function(obj, name) {
      if (!obj) {
        throw new Error("'" + name + "' required!");
      }
      return obj;
    },
    uniqueBy: function(list, value) {
      var attrName, currentValue, item, previousValue, sortedList, unique, _i, _len;
      if (!_(value).isFunction()) {
        attrName = value;
        value = function(v) {
          return v[attrName];
        };
      }
      sortedList = _(list).sortBy(value);
      previousValue = null;
      unique = [];
      for (_i = 0, _len = sortedList.length; _i < _len; _i++) {
        item = sortedList[_i];
        if ((currentValue = value(item)) !== previousValue) {
          unique.push(item);
          previousValue = currentValue;
        }
      }
      return unique;
    },
    random: function(from, to) {
      return from + Math.floor((to - from + 1) * Math.random());
    },
    extendIfNotBlank: function() {
      var k, list, obj, source, v, _i, _len;
      obj = arguments[0], list = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        source = list[_i];
        for (k in source) {
          v = source[k];
          if (v != null) {
            obj[k] = v;
          }
        }
      }
      return obj;
    },
    extendIfBlank: function() {
      var k, list, obj, source, v, _i, _len;
      obj = arguments[0], list = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        source = list[_i];
        for (k in source) {
          v = source[k];
          if (_(obj[k]).isBlank()) {
            obj[k] = v;
          }
        }
      }
      return obj;
    }
  });

}).call(this);
